<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
Contains common definition that are platform dependent
-->
<target name="tools.init">
    <condition property="windows">
        <os family="windows" />
    </condition>
    <condition property="unix">
        <os family="unix" />
    </condition>
    <condition property="solaris">
        <os name="SunOS"/>
    </condition>
    <condition property="linux">
        <os name="Linux"/>
    </condition>
    <condition property="mac">
        <os name="Mac OS X"/>
    </condition>
</target>
<target name="tools.init.windows" if="windows">
    <property name="JAVAH" value="${java.home}/../bin/javah.exe"/>
    <property name="MAKE" value="gmake"/>
</target>
<target name="tools.init.unix" if="unix" unless="mac">
    <property name="JAVAH" value="${java.home}/../bin/javah"/>
    <property name="MAKE" value="gmake"/>
</target>
    <target name="tools.init.mac" if="mac">
    <property name="JAVAH" value="${java.home}/bin/javah"/>
    <property name="MAKE" value="make"/>
</target>
<target name="tools.init.platform" 
    depends="tools.init, tools.init.windows, tools.init.unix, tools.init.mac">
</target>
    

<!--
    Definitions for Checkstyle
-->
<target name="checkstyle"
        description="Generates a report of coding convention violations.">

    <!-- Get properties from environment -->
    <property environment="env"/>

    <!-- Set default values if these are not in the environment / cmd line -->
    <!-- Order of preference is cmd line, environment, default -->
    <property name="env.JWS_EXTERNAL_COMPONENTS_DIR" value="/net/koori.sfbay/onestop/s1aspe/8.0/external"/>
    <property name="JWS_EXTERNAL_COMPONENTS_DIR" value="${env.JWS_EXTERNAL_COMPONENTS_DIR}"/>
    <property name="env.CHECKSTYLE_HOME" value="${JWS_EXTERNAL_COMPONENTS_DIR}/checkstyle"/>

    <!-- CHECKSTYLE_HOME contains Checkstyle jars and config files -->
    <property name="CHECKSTYLE_HOME" value="${env.CHECKSTYLE_HOME}"/>

    <taskdef resource="checkstyletask.properties" classpath="${CHECKSTYLE_HOME}/checkstyle-all-3.5.jar:${CHECKSTYLE_HOME}/checkstyle-sun-modules.jar"/>


    <!-- CHECKSTYLE_DIR, CHECKSTYLE_FILES, CHECKSTYLE_STYLESHEET, 
         CHECKSTYLE_CONFIG and CHECKSTYLE_OUTPUT variables have defaults below.
	 They can be overridden by setting corresponding env variables 
	 in the shell, or from the command line:
         % ant -DCHECKSTYLE_DIR=somedir -DCHECKSTYLE_FILES="*.java" ....
         (command-line overrides environment vars).  -->
    <condition property="CHECKSTYLE_FILES" 
	       value="${env.CHECKSTYLE_FILES}">
        <isset property="env.CHECKSTYLE_FILES"/>
    </condition>
    <property name="CHECKSTYLE_FILES" value="**/*.java"/>

    <condition property="CHECKSTYLE_DIR" 
	       value="${env.CHECKSTYLE_DIR}">
        <isset property="env.CHECKSTYLE_DIR"/>
    </condition>
    <property name="CHECKSTYLE_DIR" value="."/>

    <condition property="CHECKSTYLE_STYLESHEET" 
	       value="${env.CHECKSTYLE_STYLESHEET}">
        <isset property="env.CHECKSTYLE_STYLESHEET"/>
    </condition>
    <property name="CHECKSTYLE_STYLESHEET" 
              value="${CHECKSTYLE_HOME}/checkstyle-noframes-sorted.xsl"/>

    <condition property="CHECKSTYLE_OUTPUT" 
	       value="${env.CHECKSTYLE_OUTPUT}">
        <isset property="env.CHECKSTYLE_OUTPUT"/>
    </condition>
    <property name="CHECKSTYLE_OUTPUT" value="checkstyle-report.html"/>

    <condition property="CHECKSTYLE_CONFIG" 
	       value="${env.CHECKSTYLE_CONFIG}">
        <isset property="env.CHECKSTYLE_CONFIG"/>
    </condition>
    <property name="CHECKSTYLE_CONFIG" value="${CHECKSTYLE_HOME}/as-checks.xml"/>


    <echo message="Running Checkstyle on ${CHECKSTYLE_DIR}/${CHECKSTYLE_FILES} using configuration ${CHECKSTYLE_CONFIG} and writing report to ${CHECKSTYLE_OUTPUT}"/>

    <checkstyle config="${CHECKSTYLE_CONFIG}"
                failOnViolation="false">
        <formatter type="xml" tofile="checkstyle-report.xml"/>
        <fileset dir="${CHECKSTYLE_DIR}" includes="${CHECKSTYLE_FILES}"/>
    </checkstyle>

    <style in="checkstyle-report.xml" out="${CHECKSTYLE_OUTPUT}" style="${CHECKSTYLE_STYLESHEET}"/>

    <delete file="checkstyle-report.xml"/>

</target>


<target name="-push-to-maven-init" description="define a task for pushing bits to the maven repository">
    <echo>${maven.repo.local}/com.sun.wts.tools.mri/jars/maven-repository-importer-${glassfish.maven_repository_importer.version}.jar</echo>
    <taskdef resource="maven-repository-importer.properties">
        <classpath>
            <pathelement path="${maven.repo.local}/com.sun.wts.tools.mri/jars/maven-repository-importer-${glassfish.maven_repository_importer.version}.jar" />
        </classpath>
    </taskdef>
</target>

<!--
  import files to CVS
  
  For example, <cvs-import src="build/doc" dest="jaxb/www/doc" />
-->
<macrodef name="cvs-import">
    <attribute name="src"/>
    <attribute name="dest"/>
    <sequential>
        <tstamp />
        <echo>importing to CVS...</echo>
        <cvs dest="@{src}">
            <commandline>
                <argument value="-d${glassfish.cvsroot}"/>
                <argument line="-z9 import -ko"/>
                <argument value="-W"/>
                <argument line="*.jar -kb"/>
                <argument value="-m"/>
                <argument value="deploying new jars to the java.net maven repository"/>
                
                <argument value="@{dest}"/>
                <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}" />
            </commandline>
        </cvs>
    </sequential>
</macrodef>
