<?xml version="1.0" encoding="iso-8859-1"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE project [
  <!ENTITY commonBuild SYSTEM "ant-common.xml">
]>
<project name="JavaMail" default="all" basedir="."
	xmlns:cpptasks="antlib:org.sf.net.antcontrib.cpptasks">

    <taskdef resource="cpptasks.tasks"/>
    <typedef resource="cpptasks.types"/>

<!-- ========== Initialize Properties =================================== -->

    <!--
        component.name: required property.  the value should be the
                        name of the component directory
    -->
    <property name="component.name" value="mbox"/>

    <property file="./build.properties"/>

    <property name="cc.debug" value="false"/>
    <property name="generated.dir" value="mbox/target/generated"/>
    <property name="obj.dir" value="mbox/target/native/${os.name}-${os.arch}"/>
    <property name="lib.dir" value="mbox/target/lib/${os.name}-${os.arch}"/>
    <condition property="is-solaris">
	<os name="SunOS"/>
    </condition>
    
    &commonBuild;

    <!-- all -->
    <target name="all" depends="mboxcompile, mboxcc, mboxjar"
            description="Build entire mbox component">
    </target>

    <!-- build -->
    <target name="build" depends="mboxcompile, mboxcc, mboxjar"
            description="Build entire mbox component">
    </target>

    <!-- init. Initialization involves creating publishing directories and
         OS specific targets. -->
    <target name="init" description="${component.name} initialization">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <echo message="Building component ${component.name}"/>
        <mkdir dir="${component.classes.mbox.dir}"/>
        <mkdir dir="${generated.dir}"/>
        <mkdir dir="${obj.dir}"/>
        <mkdir dir="${lib.dir}"/>
    </target>

    <!-- prepare manifest files for jars -->
    <target name="cook-manifest" depends="init"
            description="Generate MANIFEST.MF files">
        <mkdir dir="${component.classes.mbox.dir}/manifest"/>
        <copy file="${resources.mbox.dir}/META-INF/MANIFEST.MF"
		tofile="${component.classes.mbox.dir}/manifest/MANIFEST.MF">
            <filterset begintoken="{" endtoken="}">
		<filter token="mail.spec.version"
		    value="${release.specversion}"/>
		<filter token="mail.version" value="${release.version}"/>
            </filterset>
        </copy>
    </target>

    <!-- mbox compile -->
    <target name="mboxcompile" depends="init"
            description="Compile com/sun/mail/mbox sources">

        <javac srcdir="${src.mbox.dir}"
               destdir="${component.classes.mbox.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.source}"
               deprecation="${javac.deprecation}"
               failonerror="true"
               target="${javac.target}">
            <classpath>
                <pathelement location="${component.classes.dir}"/>
                <pathelement location="${activation.jar}"/>
            </classpath>
	    <!--
            <include name="com/sun/mail/mbox/**"/>
	    -->
        </javac>
    </target>

    <target name="mboxheaders" depends="mboxcompile">
	<javah destdir="${generated.dir}"
		force="yes"
		verbose="yes"
		classpath="${component.classes.mbox.dir}:${component.classes.dir}">
            <class name="com.sun.mail.mbox.UNIXFile"/>
            <class name="com.sun.mail.mbox.UNIXInbox"/>
	</javah>
    </target>

    <target name="mboxcc" depends="mboxheaders, mboxcc-solaris"/>

    <!--
    make-based build uses these compiler and linker options:

    cc -Xa -xO2 -v -D_REENTRANT   -Dsparc -DSOLARIS2 

    cc -G -o ../../../../../../build/solaris/lib/sparc/libmbox.so 
	    obj/sparc/./UNIXFile.o obj/sparc/./UNIXInbox.o    
	    -L/java/re/jdk/1.4/archive/fcs/binaries/solsparc/jre/lib/sparc 
	    -L../../../../../../build/solaris/lib/sparc  
	    -lmail 
	    -L../../../../../../build/solaris/lib/sparc 
	    -ljava  
	    -lc
    -->

    <target name="mboxcc-solaris" depends="mboxheaders" if="is-solaris">
	<cc debug="${cc.debug}"
		link="shared"
		outfile="${lib.dir}/mbox"
		objdir="${obj.dir}">
	    <compiler name="sunc89"/>
	    <fileset dir="mbox/src/main/cpp" includes="**/*.c"/>
	    <includepath location="${generated.dir}"/>
	    <sysincludepath location="${java.home}/../include"/>
	    <sysincludepath location="${java.home}/../include/solaris"/>
	    <defineset>
		<define name="_REENTRANT"/>
	    </defineset>
	    <compilerarg value="-Xa"/>
	    <compilerarg value="-xO2"/>
	    <linker name="sunc89">
		<syslibset libs="mail,java,c"/>
	    </linker>
	</cc>
    </target>

    <target name="clean" description="Clean the build">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${component.classes.mbox.dir}"/>
        </delete>
    </target>

    <!-- JavaMail bundle build targets -->

    <target name="mboxrelease" depends="init, mboxjar, mboxcc">
        <property name="rel" value="mbox-${release.version}"/>
        <property name="zipname" value="${rel}.zip"/>
        <delete file="${basedir}/mbox/target/${zipname}"/>
        <echo message="Creating mbox bundle ${basedir}/mbox/target/${zipname}"/>
        <zip destfile="${basedir}/mbox/target/${zipname}">
	    <zipfileset dir="${resources.legal.dir}/META-INF" prefix="${rel}"
                    includes="LICENSE.txt"/>
	    <zipfileset dir="${release.dir}/lib" prefix="${rel}"
		    includes="mbox.jar"/>
            <zipfileset dir="${lib.dir}/.." prefix="${rel}/lib"
		    includes="**/*.so"/>
        </zip>
    </target>

     <target name="mboxjar" depends="init, mboxcompile, cook-manifest">
        <mkdir dir="${release.dir}/lib"/>
        <jar jarfile="${release.mbox.jar}"
		manifest="${component.classes.mbox.dir}/manifest/MANIFEST.MF">
            <metainf dir="${resources.legal.dir}/META-INF"
		    includes="LICENSE.txt"/>
            <fileset dir="${component.classes.mbox.dir}">
                <include name="com/sun/mail/mbox/*.class"/>
                <include name="com/sun/mail/mbox/mailcap"/>
            </fileset>
        </jar>
     </target>

    <target name="push-to-maven-prepare" depends="-push-to-maven-init, mboxjar"
        description="creates an image for the 'push-to-maven' goal">
        <delete dir="target/maven-repo" /><!-- clean it -->
        <maven-repository-importer destdir="target/maven-repo"
		version="${release.version}">
            <artifact jar="target/release/mbox.jar" pom="mbox.pom"
		    srczip="target/mbox.src.zip" />
        </maven-repository-importer>
    </target>

    <target name="push-to-maven" depends="push-to-maven-prepare"
        description="pushes jars to the java.net maven repository">
        <cvs-import src="target/maven-repo" dest="glassfish/repo" />
    </target>
</project>
